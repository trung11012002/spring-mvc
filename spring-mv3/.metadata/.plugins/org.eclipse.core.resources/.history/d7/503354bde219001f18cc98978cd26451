package com.laptrinhjavaweb.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.laptrinhjavaweb.converter.UserConverter;
import com.laptrinhjavaweb.dto.UserDTO;
import com.laptrinhjavaweb.entity.RoleEntity;
import com.laptrinhjavaweb.entity.UserEntity;
import com.laptrinhjavaweb.repository.RoleRepository;
import com.laptrinhjavaweb.repository.UserRepository;
import com.laptrinhjavaweb.service.IUserService;

@Service
public class UserService implements IUserService {
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private UserConverter userConverter;
	@Autowired
	RoleRepository roleRepository;

	@Override
	public List<UserDTO> findAll(Pageable pageable) {
		List<UserEntity> entities = userRepository.findAll(pageable).getContent();
		List<UserDTO> result = new ArrayList<>();
		for (UserEntity item : entities) {
			result.add(userConverter.toDto(item));
		}
		return result;
	}

	@Override
	@Transactional
	public UserDTO persist(UserDTO userDTO) {
		try {
			// Kiểm tra xem người dùng đã tồn tại trong DB hay chưa
			UserEntity checkUser = userRepository.findOneByUserName(userDTO.getUserName().trim());
			if (checkUser == null) {
				// Chuyển đổi DTO sang Entity
				UserEntity result = userConverter.toEntity(userDTO);
				List<RoleEntity> listRoleEntity = new ArrayList<>();

				// Thêm các vai trò (roles)
				if (userDTO.getRoles() != null && !userDTO.getRoles().isEmpty()) {
					for (String roleCode : userDTO.getRoles()) {
						RoleEntity roleEntity = roleRepository.findOneByCode(roleCode);
						if (roleEntity == null) {
							throw new RuntimeException("Role not found: " + roleCode);
						}
						listRoleEntity.add(roleEntity);
					}
				}
				result.setRoles(listRoleEntity);

				// Mã hóa mật khẩu
				BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
				result.setPassword(encoder.encode(result.getPassword().trim()));

				// Lưu người dùng vào cơ sở dữ liệu
				UserEntity savedEntity = userRepository.save(result);
				return userConverter.toDto(savedEntity);

			} else {
				// Tài khoản đã tồn tại trong DB
				return null;
			}
		} catch (Exception e) {
			// Ghi log lỗi và ném lại ngoại lệ
			e.printStackTrace();
			throw new RuntimeException("Error persisting user", e);
		}

	}

	@Override
	@Transactional
	public void delete(long ids[]) {
		for (long id : ids) {
			userRepository.delete(id);
		}
	}

	@Override
	public int getTotalItem() {
		return (int) userRepository.count();
	}

	@Override
	public UserDTO findById(long id) {
		
		return userRepository.findOne(id);
	}
}
