package com.laptrinhjavaweb.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.laptrinhjavaweb.converter.NewConverter;
import com.laptrinhjavaweb.dto.NewDTO;
import com.laptrinhjavaweb.entity.CategoryEntity;
import com.laptrinhjavaweb.entity.CommentEntity;
import com.laptrinhjavaweb.entity.NewEntity;
import com.laptrinhjavaweb.repository.CategoryRepository;
import com.laptrinhjavaweb.repository.CommentRepository;
import com.laptrinhjavaweb.repository.NewRepository;
import com.laptrinhjavaweb.service.INewService;

@Service
public class NewService implements INewService {

//	@Autowired
//	private INewDAO newDao;
	@Autowired
	private NewRepository newRepository;
	@Autowired
	private NewConverter newConverter;
	@Autowired
	private CategoryRepository categoryRepository;
	@Autowired
	private CommentRepository commentRepository;
	
	@Override
	public List<NewDTO> findAll(Pageable pageable) {
		List<NewDTO> models = new ArrayList<>();
		List<NewEntity> entities = newRepository.findAll(pageable).getContent();
		for (NewEntity item : entities) {
			NewDTO newDTO = newConverter.toDto(item);
			models.add(newDTO);
		}
		return models;
	}

	@Override
	public int getTotalItem() {
		// TODO Auto-generated method stub
		return (int) newRepository.count();
	}

	@Override
	public NewDTO finById(long id) {
		// TODO Auto-generated method stub
		NewEntity entity = newRepository.findOne(id);
		return newConverter.toDto(entity);
	}

	@Override
	@Transactional
	public NewDTO insert(NewDTO newDto) {
		CategoryEntity categoryEntity = categoryRepository.findOneByCode(newDto.getCategoryCode());
		NewEntity newEntity = newConverter.toEntity(newDto);
		newEntity.setCategory(categoryEntity);
		newEntity = newRepository.save(newEntity);
		return newConverter.toDto(newEntity);
	}

	@Override
	@Transactional
	public NewDTO update(NewDTO dto) {
		CategoryEntity categoryEntity = categoryRepository.findOneByCode(dto.getCategoryCode());
		NewEntity oldNew = newRepository.findOne(dto.getId());
		NewEntity updateNew = newConverter.toEntity(oldNew,dto);
		updateNew.setCategory(categoryEntity);
		return newConverter.toDto(newRepository.save(updateNew));
	}
	@Override
	@Transactional
	public NewDTO save(NewDTO dto) {
		CategoryEntity categoryEntity = categoryRepository.findOneByCode(dto.getCategoryCode());
		CommentEntity commentEntity = commentRepository.findByNews_Id(dto.getId());
		NewEntity newEntity = new NewEntity();
		if(dto.getId() != null) {
			NewEntity oldNew = newRepository.findOne(dto.getId());
			oldNew.setCategory(categoryEntity);
			newEntity = newConverter.toEntity(oldNew,dto);
		}else {
			newEntity = newConverter.toEntity(dto);
			newEntity.setCategory(categoryEntity);
		}
		return newConverter.toDto(newRepository.save(newEntity));
	}

	@Override
	@Transactional
	public void delete(long ids []) {
		for(long id : ids) {
			newRepository.delete(id);
		}
	}

}
