package com.laptrinhjavaweb.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.laptrinhjavaweb.converter.UserConverter;
import com.laptrinhjavaweb.dto.UserDTO;
import com.laptrinhjavaweb.entity.RoleEntity;
import com.laptrinhjavaweb.entity.UserEntity;
import com.laptrinhjavaweb.repository.RoleRepository;
import com.laptrinhjavaweb.repository.UserRepository;
import com.laptrinhjavaweb.service.IUserService;

@Service
public class UserService implements IUserService{
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private UserConverter userConverter;
	@Autowired RoleRepository roleRepository;
	@Override
	public List<UserDTO> findAll(Pageable pageable) {
		List<UserEntity> entities = userRepository.findAll(pageable).getContent();
		List<UserDTO> result = new ArrayList<>();
		for(UserEntity item : entities) {
			result.add(userConverter.toDto(item));
		}
		return result;
	}
	@Override
	@Transactional
	public UserDTO persist(UserDTO userDTO) {
		UserEntity checkUser = userRepository.findOneByUserName(userDTO.getUserName().trim());
		if(checkUser == null) {
			UserEntity result = userConverter.toEntity(userDTO);
			List<RoleEntity> listRoleEntity = new ArrayList<>();
			if(userDTO.getRoles() != null && userDTO.getRoles().size() > 0) {
				for(String roleCode : userDTO.getRoles()) {
					listRoleEntity.add(roleRepository.findOneByCode(roleCode));
				}
			}
			result.setRoles(listRoleEntity);
			//ma hoa password
			BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
			result.setPassword(encoder.encode(result.getPassword().trim()));
			return userConverter.toDto(userRepository.save(result));
		}else {
			//tai khoan da co trong db
			return null;
		}
		
	}
	@Override
	@Transactional
	public void delete(long ids []) {
		for(long id : ids) {
			userRepository.delete(id);
		}
	}
}
